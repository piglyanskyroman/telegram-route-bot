import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –ø–æ —Ä–∞–π–æ–Ω–∞–º
ROUTE_DATA = {
    "–ó–∞–ø–∞–¥–Ω—ã–π": ["1201", "1202", "1203", "1204", "1205", "1206", "1207", "1208", "1209", "1210",
                 "1301", "1302", "1303", "1304", "1305", "1306", "1307", "1308", "1309", "1310",
                 "1401", "1402", "1403", "1404", "1405", "1406", "1407", "1408", "1409", "1410", "1411",
                 "1501", "1502", "1503", "1504", "1505", "1506", "1507", "1508"],

    "–õ–µ–Ω–∏–Ω–∞": ["2101", "2102", "2103", "2104", "2105", "2106", "2107", "2108", "2109", "2110"],

    "–ö–∞–º–µ–Ω–∫–∞+–í–æ–µ–Ω–≤–µ–¥": ["2111", "4301", "4302", "4303", "4304", "4305", "4306", "4307", "4308"],

    "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∫–∞": ["3101", "3102", "3103", "3104", "3105", "3106", "3107", "3108"],

    "–¢–µ–º–µ—Ä–Ω–∏–∫+–ß–∫–∞–ª–æ–≤—Å–∫–∏–π": ["3201", "3202", "3203", "3204", "3205", "3206", "3207", "3208",
                            "3209", "3210", "3211", "3212", "3213"],

    "–°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω": ["4101", "4102", "4103", "4104", "4105", "4106", "4107", "4108", "4109", "4110",
                       "4201", "4202", "4203", "4204", "4205", "4206", "4207", "4208", "4209", "4210",
                       "4211", "4212", "4213", "4214", "4215"],

    "–°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π": ["4401", "4402", "4403", "4404", "4405", "4406"],

    "–õ–µ–≤–µ–Ω—Ü–æ–≤–∫–∞": ["1101", "1102", "1103", "1104", "1105", "1106", "1107", "1108", "1109", "1120"],

    "–¶–µ–Ω—Ç—Ä": ["2201", "2202", "2203", "2204", "2205", "2206", "2207", "2208", "2209", "2210",
              "2211", "2212", "2213", "2214", "2215"],

    "–°–µ–ª—å–º–∞—à": ["2301", "2302"],

    "–ö—Ä–∞—Å–Ω—ã–π –ê–∫—Å–∞–π": ["2303", "2304"]
}

# –î–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —è—â–∏–∫–æ–≤ –∏ –ø–æ–¥—ä–µ–∑–¥–æ–≤
ROUTE_STATS = {
    "1201": {"boxes": 2286, "entrances": 28},
    "1202": {"boxes": 1971, "entrances": 46},
    "1203": {"boxes": 2080, "entrances": 44},
    # ... (–≤—Å—Ç–∞–≤—å—Ç–µ –í–°–Æ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)
    # –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–≤–ª—é —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    "1120": {"boxes": 2184, "entrances": 39}
}

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif', '.JPG', '.JPEG', '.PNG', '.GIF'}

class RouteBot:
    def __init__(self, token):
        self.application = Application.builder().token(token).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.handle_district, pattern="^district_"))
        self.application.add_handler(CallbackQueryHandler(self.handle_route, pattern="^route_"))
        self.application.add_handler(CallbackQueryHandler(self.handle_back, pattern="^back_to_"))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = []
        for district in ROUTE_DATA.keys():
            keyboard.append([InlineKeyboardButton(district, callback_data=f"district_{district}")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text(
                "üöç –ë–æ—Ç –∫–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
                reply_markup=reply_markup
            )
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                "üöç –ë–æ—Ç –∫–∞—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
                reply_markup=reply_markup
            )

    async def handle_district(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        district = query.data.replace("district_", "")
        context.user_data['current_district'] = district

        routes = ROUTE_DATA[district]
        keyboard = []

        for i in range(0, len(routes), 4):
            row = []
            for route in routes[i:i + 4]:
                row.append(InlineKeyboardButton(route, callback_data=f"route_{route}"))
            keyboard.append(row)

        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–π–æ–Ω–∞–º", callback_data="back_to_districts")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"üìç –†–∞–π–æ–Ω: {district}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞:",
            reply_markup=reply_markup
        )

    async def handle_route(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        route_number = query.data.replace("route_", "")
        context.user_data['current_route'] = route_number

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            route_stats = ROUTE_STATS.get(route_number, {})
            boxes = route_stats.get("boxes", "–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è")
            entrances = route_stats.get("entrances", "–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è")

            stats_message = (
                f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç ‚Ññ{route_number}\n"
                f"üì¶ –Ø—â–∏–∫–æ–≤: {boxes}\n"
                f"üö™ –ü–æ–¥—ä–µ–∑–¥–æ–≤: {entrances}\n"
                f"üìç –†–∞–π–æ–Ω: {context.user_data.get('current_district', '')}"
            )

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ
            photo_found = False
            for ext in ALLOWED_EXTENSIONS:
                photo_path = f"photos/{route_number}{ext}"
                if os.path.exists(photo_path):
                    with open(photo_path, 'rb') as photo:
                        await context.bot.send_photo(
                            chat_id=query.message.chat_id,
                            photo=photo,
                            caption=stats_message,
                            protect_content=True
                        )
                    photo_found = True
                    break

            if not photo_found:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"‚ùå –§–æ—Ç–æ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ {route_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n{stats_message}"
                )

            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞—Ä—à—Ä—É—Ç–∞–º", 
                                    callback_data=f"district_{context.user_data.get('current_district', '')}")],
                [InlineKeyboardButton("üè† –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_districts")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

        except Exception as e:
            logging.error(f"Error: {e}")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ"
            )

    async def handle_back(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == "back_to_districts":
            await self.start(update, context)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ–±–ª–∞–∫–µ Railway!")
        self.application.run_polling()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("photos", exist_ok=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    BOT_TOKEN = os.environ.get('BOT_TOKEN')
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)
    
    bot = RouteBot(BOT_TOKEN)
    bot.run()